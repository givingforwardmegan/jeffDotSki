import React from 'react';
import PropTypes from 'prop-types';
import Button from 'material-ui/Button';

import BlogFormSections from './BlogFormSections';
import BlogEntryText from './BlogFormSections/BlogEntryText';
import BulletList from './BlogFormSections/BulletList';
import Quote from './BlogFormSections/Quote';
import './styles.css';

/* 
toolbox for creating a blog.
user can click buttons corresponding to different blog things they want.
these blog elements will appear as they click them buttons.
*/
class BlogEntryFormGenerator extends React.Component {

    constructor(props){
        super(props);

        this.createBlogDataModel = this.createBlogDataModel.bind(this);

        this.state = {
            //toolbox with all components that can be used to make blog content.
            blogSectionsToolbox : [
                {
                    label: 'Blog Paragraphs',
                    component: BlogEntryText,
                    blogData: null
                },
                {
                    label: 'Bullet List',
                    component: BulletList,
                    blogData: null
                },
                {
                    label: 'Quote',
                    component: Quote,
                    blogData: null
                }
            ],
            //sections generated by user for blog creation. This array reflects the blog elements on screen.
            blogSectionsOnscreen: {
                
            }
        }
    }
    
    //callback for when form section is deleted
    sectionDeletedCallback = (keyToDelete) => {
        console.log('jeffski state before deleting ', keyToDelete, ':', this.state.blogSectionsOnscreen);
        
        let filteredBlogEntrySectionArr = {};

        Object.keys(this.state.blogSectionsOnscreen).map((key, index) => {
            if(key !== keyToDelete){
                console.log('jeffski pushing index', index);
                filteredBlogEntrySectionArr[key] = this.state.blogSectionsOnscreen[key];
            }else{
                filteredBlogEntrySectionArr[key] = null;
            }
        });
        
        console.log('jeffski array we will be storing in state after deleting ', filteredBlogEntrySectionArr);
        this.setState({ blogSectionsOnscreen: filteredBlogEntrySectionArr },
        ()=>{
            console.log('after set state', this.state.blogSectionsOnscreen);
        }
        )
    }
    
    //callback for when child form is filled out
    storeSectionDataCallback = (key, newBlogData) => {
        //set state for this object
        let sectionsArrWithData = {...this.state.blogSectionsOnscreen};
        sectionsArrWithData[key].blogData = newBlogData; 
        this.setState({ blogSectionsOnscreen: sectionsArrWithData });

        //hand combined state up to parent object
        let blogtextdata = this.createBlogDataModel();
        this.props.getBlogTextData(blogtextdata);
    }

    //returns a model with blog text data ready to be pushed to the server
    createBlogDataModel(){
        let blogTextData = {};
        Object.keys(this.state.blogSectionsOnscreen).map((key, index) => {
            if(Array.isArray(this.state.blogSectionsOnscreen[key].blogData)){
                blogTextData = [...blogTextData, ...this.state.blogSectionsOnscreen[key].blogData];
            }
            else{
                blogTextData = [...blogTextData, this.state.blogSectionsOnscreen[key].blogData];
            }
        })

        return blogTextData;
    }
    
    //renders a blog section. These sections were chosen by the user
    renderBlogSection = () => {
        console.log('jeffski rendering section ', this.state.blogSectionsOnscreen);
        
        return Object.keys(this.state.blogSectionsOnscreen).map((key, index) => {
            
            if(this.state.blogSectionsOnscreen[key] === null){
                return null;
            }

            //get title and component information
            let SectionComponent = this.state.blogSectionsOnscreen[key].component;
            return(
                <BlogFormSections
                    key={index}
                    sectionOnScreen={index}
                    title={this.state.blogSectionsOnscreen[key].label}
                    deleteCallback={ () => {this.sectionDeletedCallback(key)} }
                    >
                    <SectionComponent
                        sectionOnScreen={index}
                        formDataCallback={(data) => {this.storeSectionDataCallback(key, data)}}
                    />
                </BlogFormSections>
            );
         });
    }

    //renders the button for the blog toolbox. These buttons when clicked will allow the user to add different blog sections
    createBlogToolboxButton = (buttonInfo, index) => {
        let addSectionButtonStyle = {
            padding: "5px",
            margin: "5px"
        }
        return (
            <Button
                key={index}
                style={addSectionButtonStyle}
                variant="raised"
                onClick={()=> this.onAddBlogSectionButtonClicked(index)} 
            >
                {buttonInfo.label}
            </Button>
        )
    }

    // adds a new blog section from the toolbox. The selection from the toolbox will eventually appear on screen.
    onAddBlogSectionButtonClicked = (index) => {
        console.log('jeffski adding ', index)

        //make a copy (NOT a reference) and put the new toolbox in the state array of all the forms on the page
        let nextBlogSection = {...this.state.blogSectionsToolbox[index]};
        let sectionIndex = 'section-' + (new Date()).getTime();
        let nextState = {...this.state.blogSectionsOnscreen};
        nextState[sectionIndex] = nextBlogSection;
        this.setState( {blogSectionsOnscreen: nextState} );
    }
    
    //the user can add fields of different types
    render(){
        return(
            <div>
                {this.renderBlogSection()}
                <div className="addSectionButtonsContainer">
                    {this.state.blogSectionsToolbox.map(this.createBlogToolboxButton)}
                </div>
            </div>
        );
    }
}

BlogEntryFormGenerator.propTypes = {
    //callback with data parameter which will execute when blog data has been obtained
    getBlogTextData: PropTypes.func
}

export default BlogEntryFormGenerator;